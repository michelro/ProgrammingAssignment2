## Return a numeric vector of correlations
source("complete.R")
trh <- subset(complete(path), nobs > threshold)
selected_ids <- formatC(as.vector(trh$id, mode = "integer"), digits = 0, width = "3", format = "d", flag = "0")
correlations <- vector("numeric")
for (i in seq_along(selected_ids)) {
monitor_file <- paste(directory, "/", selected_ids[i], ".csv", sep = "")
csv_data <- read.csv(monitor_file)
csv_data <- csv_data[complete.cases(csv_data), ]
correlations <- c(correlations, cor(csv_data$sulfate, csv_data$nitrate))
}
correlations
}
submit()
submit()
complete(path, 3)
x <- read.csv("001.csv")
x <- read.csv("specdat/001.csv")
x <- read.csv("specdata/001.csv")
x
names(x)
is.na(x$sulfate)
is.na(x$nitrate)
y <- is.na(x$sulfate) & is.na(x$nitrate)
y
x
x[y, ]
x[!y, ]
a <- !is.na(x$sulfate)
x[a]
x[a, ]
x[a, ]
x
a
b <- !is.na(x$nitrate)
b
x
y
a
b
a & b
a <- c(T, F, F)
b <- c(F, T, F)
a & b
a | b
x
a <- !is.na(x$sulfate)
b <- !is.na(x$nitrate)
c <- a & b
x[c, ]
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
complete_cases <- data.frame()
id <- formatC(id, digits = 0, width = "3", format = "d", flag = "0")
for (i in seq_along(id)) {
monitor_file = paste(directory, "/", id[i], ".csv", sep = "")
monitor <- read.csv(monitor_file)
x <- !is.na(monitor$nitrate)
y <- !is.na(monitor$sulfate)
complete_cases <- rbind(complete_cases, monitor[x & y, ])
}
complete_cases <- as.data.frame(table(complete_cases$ID))
names(complete_cases) <- c("id", "nobs")
complete_cases
}
complete(path, 1)
complete(path, c(2, 4, 8, 10, 12))
complete(path, 30:25
)
submit()
submit()
complete <- function(directory, id = 1:332) {
complete_cases <- data.frame()
files_list <- list.files(directory, pattern = "*.csv", full.names = TRUE)
for (i in seq_along(files_list)) {
monitor <- read.csv(files_list[i])
x <- !is.na(monitor$nitrate)
y <- !is.na(monitor$sulfate)
complete_cases <- rbind(complete_cases, monitor[x & y, ])
}
complete_cases <- as.data.frame(table(complete_cases$ID))
names(complete_cases) <- c("id", "nobs")
complete_cases
}
complete(path, 1)
complete <- function(directory, id = 1:332) {
complete_cases <- data.frame()
files_list <- list.files(directory, pattern = "*.csv", full.names = TRUE)
for (i in seq_along(id)) {
monitor <- read.csv(files_list[i])
x <- !is.na(monitor$nitrate)
y <- !is.na(monitor$sulfate)
complete_cases <- rbind(complete_cases, monitor[x & y, ])
}
complete_cases <- as.data.frame(table(complete_cases$ID))
names(complete_cases) <- c("id", "nobs")
complete_cases
}
complete(path, 1)
submit()
complete(path, 0)
complete <- function(directory, id = 1:332) {
complete_cases <- data.frame(id = integer(), nobs = integer())
files_list <- list.files(directory, pattern = "*.csv", full.names = TRUE)
for (i in seq_along(id)) {
monitor <- read.csv(files_list[i])
x <- !is.na(monitor$nitrate)
y <- !is.na(monitor$sulfate)
complete_cases <- rbind(complete_cases, monitor[x & y, ])
}
complete_cases <- as.data.frame(table(complete_cases$ID))
names(complete_cases) <- c("id", "nobs")
complete_cases
}
complete(path, 0)
complete(path, 1)
submit()
complete(path, 30:25)
complete <- function(directory, id = 1:332) {
complete_cases <- data.frame(id = integer(), nobs = integer())
files_list <- list.files(directory, pattern = "*.csv", full.names = TRUE)
print(files_list)
for (i in seq_along(id)) {
monitor <- read.csv(files_list[i])
x <- !is.na(monitor$nitrate)
y <- !is.na(monitor$sulfate)
complete_cases <- rbind(complete_cases, monitor[x & y, ])
}
complete_cases <- as.data.frame(table(complete_cases$ID))
names(complete_cases) <- c("id", "nobs")
complete_cases
}
complete(path, 30:25)
complete <- function(directory, id = 1:332) {
complete_cases <- data.frame(id = integer(), nobs = integer())
files_list <- list.files(directory, pattern = "*.csv", full.names = TRUE)
print(files_list)
for (i in seq_along(id)) {
monitor <- read.csv(files_list[id[i]])
x <- !is.na(monitor$nitrate)
y <- !is.na(monitor$sulfate)
complete_cases <- rbind(complete_cases, monitor[x & y, ])
}
complete_cases <- as.data.frame(table(complete_cases$ID))
names(complete_cases) <- c("id", "nobs")
complete_cases
}
complete(path, 30:25)
complete <- function(directory, id = 1:332) {
complete_cases <- data.frame(id = integer(), nobs = integer())
files_list <- list.files(directory, pattern = "*.csv", full.names = TRUE)
for (i in seq_along(id)) {
monitor <- read.csv(files_list[id[i]])
x <- !is.na(monitor$nitrate)
y <- !is.na(monitor$sulfate)
complete_cases <- rbind(complete_cases, monitor[x & y, ])
}
complete_cases <- as.data.frame(table(complete_cases$ID))
names(complete_cases) <- c("id", "nobs")
complete_cases
}
complete(path, 30:25)
complete(path, 30:25)
source("complete.R")
complete(path, 30:25)
complete(path, 30:25)
View(complete_cases)
n
complete(path, 30:25)
complete <- function(directory, id = 1:332) {
complete_cases <- data.frame(id = integer(), nobs = integer())
files_list <- list.files(directory, pattern = "*.csv", full.names = TRUE)
for (i in seq_along(id)) {
monitor <- read.csv(files_list[id[i]])
x <- !is.na(monitor$nitrate)
y <- !is.na(monitor$sulfate)
#complete_cases <- rbind(complete_cases, monitor[x & y, ])
complete_cases <- rbind(complete_cases, c(id[i], nrow(monitor)))
}
#complete_cases <- as.data.frame(table(complete_cases$ID))
#names(complete_cases) <- c("id", "nobs")
complete_cases
}
complete(path, 30:25)
complete <- function(directory, id = 1:332) {
complete_cases <- data.frame(id = integer(), nobs = integer())
files_list <- list.files(directory, pattern = "*.csv", full.names = TRUE)
for (i in seq_along(id)) {
monitor <- read.csv(files_list[id[i]])
x <- !is.na(monitor$nitrate)
y <- !is.na(monitor$sulfate)
#complete_cases <- rbind(complete_cases, monitor[x & y, ])
complete_cases <- rbind(complete_cases, c(id[i], nrow(monitor[x & y, ])))
}
#complete_cases <- as.data.frame(table(complete_cases$ID))
#names(complete_cases) <- c("id", "nobs")
complete_cases
}
complete(path, 30:25)
submit()
complete <- function(directory, id = 1:332) {
complete_cases <- data.frame(id = integer(), nobs = integer())
files_list <- list.files(directory, pattern = "*.csv", full.names = TRUE)
for (i in seq_along(id)) {
monitor <- read.csv(files_list[id[i]])
x <- !is.na(monitor$nitrate)
y <- !is.na(monitor$sulfate)
complete_cases <- rbind(complete_cases, c(id[i], nrow(monitor[x & y, ])))
}
complete_cases
}
submit()
complete(path, 1)
complete <- function(directory, id = 1:332) {
complete_cases <- data.frame(id = integer(), nobs = integer())
files_list <- list.files(directory, pattern = "*.csv", full.names = TRUE)
for (i in seq_along(id)) {
monitor <- read.csv(files_list[id[i]])
x <- !is.na(monitor$nitrate)
y <- !is.na(monitor$sulfate)
complete_cases <- rbind(complete_cases, c(id[i], nrow(monitor[x & y, ])))
}
names(complete_cases) <- c("id", "nobs")
complete_cases
}
complete(path, 1)
submit
submit()
corr <- function(directory, threshold = 0) {
source("complete.R")
trh <- subset(complete(path), nobs > threshold)
files_list <- list.files(directory, pattern = "*.csv", full.names = TRUE)
correlations <- vector("numeric")
for (i in seq_along(files_list)) {
csv_data <- read.csv(files_list[i])
x <- !is.na(csv_data$nitrate)
y <- !is.na(csv_data$sulfate)
csv_data <- csv_data[x & y, ]
correlations <- c(correlations, cor(csv_data$sulfate, csv_data$nitrate))
}
correlations
}
cr <- corr(path, 150)
head(cr)
corr <- function(directory, threshold = 0) {
source("complete.R")
trh <- subset(complete(path), nobs > threshold)
files_list <- list.files(directory, pattern = "*.csv", full.names = TRUE)
correlations <- vector("numeric")
for (i in seq_along(files_list)) {
csv_data <- read.csv(files_list[i])
x <- !is.na(csv_data$nitrate)
y <- !is.na(csv_data$sulfate)
csv_data <- csv_data[x & y, ]
if (nrow(csv_data) > threshold) {
correlations <- c(correlations, cor(csv_data$sulfate, csv_data$nitrate))
}
}
correlations
}
cr <- corr(path, 150)
head(cr)
summary(cr)
submit()
submit()
submit()
cr <- corr(data, 400)
cr <- corr(path, 400)
head(cr)
summary(cr)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
x > 5
if (x > 5) { x <- 0 }
cube <- function() {
x <- 1:10
if(x > 5) {
x <- 0
}
}
cube()
cube <- function() {
print(x)
x <- 1:10
if(x > 5) {
x <- 0
}
print(x)
}
cube()
cube <- function() {
print(x)
x <- 1:10
if(x < 5) {
x <- 0
}
print(x)
}
cube()
LANGUAGE=en
ls()
rm(a, b, c, complete, corr, cr, cube, d, data, path, pollutantmean)
rm(x, y)
ls ()
ls()
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
rnorm(10)
x <- list(a = 1:5, b = rnorm(10))
x
x[1]
x[2]
x[1,1]
x[1][1]
lapply(x, mean)
rnorm(20, 1)
rnorm(100, 5)
x <- list(a = 1:5, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100,5))
x
lapply(x, mean)
lapply(x, min)
lapply(x, sample)
lapply(x, max)
lapply(x, max)
x <- 1:4
lapply(x, runif)
lapply(x, runif, min = 0, max = 10)
runif(6, min = 0, max = 60)
round
round(runif(6, min = 0, max = 60))
round(runif(6, min = 1, max = 60))
x <- list(a <- matrix(1:4, 2, 2), b <- matrix(1:6, 3, 2))
x
lapply(x, function(y) y[,1])
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 1))
x
lapply(x, mean)
sapply(x, mean)
y <- sapply(x, mean)
y
y$a
y[1]
y[2]
y[0]
mean(x)
str(lapply)
str(aplly)
str(apply)
setwd("/Users/michelribeirodeoliveira/Documents/Coursera/Data Science Specialization/R Programming/Week 2/ProgrammingAssignment2")
getwd
getwd()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse = NULL
set <- function(y) {
x <<- y
inverse = NULL
}
get <- function() x
setInverse <- function(y) inverse <<- y
getInverse <- function() inverse
list(set = set, get = get
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if (!is.null(inverse)) {
message("getting cached value")
inverse
}
data <- x$get()
inverse <- solve(x, ...)
x$setInverse(inverse)
inverse
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse = NULL
set <- function(y) {
x <<- y
inverse = NULL
}
get <- function() x
setInverse <- function(y) inverse <<- y
getInverse <- function() inverse
list(set = set, get = get
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
inverse = NULL
set <- function(y) {
x <<- y
inverse = NULL
}
get <- function() x
setInverse <- function(y) inverse <<- y
getInverse <- function() inverse
list(set = set, get = get
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
inverse = NULL
set <- function(y) {
x <<- y
inverse = NULL
}
get <- function() x
setInverse <- function(y) inverse <<- y
getInverse <- function() inverse
list(set = set, get = get
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
inverse = NULL
set <- function(y) {
x <<- y
inverse = NULL
}
get <- function() x
setInverse <- function(y) inverse <<- y
getInverse <- function() inverse
list(set = set, get = get
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if (!is.null(inverse)) {
message("getting cached value")
inverse
}
data <- x$get()
inverse <- solve(x, ...)
x$setInverse(inverse)
inverse
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if (!is.null(inverse)) {
message("getting cached value")
inverse
}
data <- x$get()
inverse <- solve(x, ...)
x$setInverse(inverse)
inverse
}
makeCacheMatrix <- function(x = matrix()) {
inverse = NULL
set <- function(y) {
x <<- y
inverse <- NULL
}
get <- function() x
setInverse <- function(y) inverse <<- y
getInverse <- function() inverse
list(set = set, get = get
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
inverse = NULL
set <- function(y) {
x <<- y
inverse <- NULL
}
get <- function() x
setInverse <- function(y) inverse <<- y
getInverse <- function() inverse
list(set = set, get = get
setInverse = setInverse,
getInverse = getInverse)
}
